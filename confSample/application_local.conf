# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Akka
# https://www.playframework.com/documentation/latest/ScalaAkka#Configuration
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
# ~~~~~
# Play uses Akka internally and exposes Akka Streams and actors in Websockets and
# other streaming HTTP responses.
akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.crypto.secret = "writeyourkey"

## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you
# directly to the code location in the IDE in dev mode. The following line makes
# use of the IntelliJ IDEA REST interface:
#play.editor="http://localhost:63342/api/file/?file=%s&line=%s"

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "en" ]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # If null, will attempt to load a class called ErrorHandler in the root package,
  #errorHandler = null

  ## Filters
  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
  # https://www.playframework.com/documentation/latest/JavaHttpFilters
  # ~~~~~
  # Filters run code on every request. They can be used to perform
  # common logic for all your actions, e.g. adding common headers.
  # Defaults to "Filters" in the root package (aka "apps" folder)
  # Alternatively you can explicitly register a class here.
  #filters = my.application.Filters

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
    hikaricp.minimumIdle = 0
    hikaricp.maximumPoolSize = 50
    hikaricp.connectionTimeout = 900000
    hikaricp.idleTimeout = 600000
    hikaricp.maxLifetime = 1800000
    hikaricp.leakDetectionThreshold = 900000
    hikaricp.readOnly = false
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#Database settings
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  default.driver =  oracle.jdbc.driver.OracleDriver
  default.url = "jdbc:oracle:thin:@//server:port/databaseName"
  default.username = "DatabaseUser"
  default.password = "password"
  default.hikaricp {
    connectionTestQuery = "SELECT 1 FROM DUAL"
    minimumIdle = 0
    maximumPoolSize = 50
    connectionTimeout = 900000
    idleTimeout = 600000
    maxLifetime = 1800000
    leakDetectionThreshold = 900000
    readOnly = false
  }

  bodenspa.driver =  oracle.jdbc.driver.OracleDriver
  bodenspa.url = "jdbc:oracle:thin:@//server:port/databaseName"
  bodenspa.username = "DatabaseUser"
  bodenspa.password = "password"
  bodenspa.hikaricp.connectionTestQuery="SELECT 1 FROM DUAL"
  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
  phano.driver =  oracle.jdbc.driver.OracleDriver
  phano.url = "jdbc:oracle:thin:@//server:port/databaseName"
  phano.username = "DatabaseUser"
  phano.password = "password"
  phano.hikaricp.connectionTestQuery="SELECT 1 FROM DUAL"
}

#FileWriter Scheduler Configuration
frequency = 300
pathInputFile = "/data/ftp/sma_lwf/"
pathForLocalWrittenFiles = "/opt/lwfportal/lwf-portal-1.0.0/generatedFiles/"
pathForArchivedFiles = "/opt/lwfportal/archive/genApril24_2020/"
pathForArchivedLogFiles = "/opt/lwfportal/archive/logs/"
pathForLogFiles = "/opt/lwfportal/lwf-portal-1.0.0/bin/"

ftpUrlMeteo = "ftpUrl"
fptUserNameMeteo = "user"
ftpPasswordMeteo ="fwl.password"
ftpPathForOutgoingFile ="/data/ftp/sma_lwf/"
ftpPathForIncomingFile = "/data/ftp/sma_lwf/historisch" # not used at the moment

pathForTempFiles = "/opt/lwfportal/tempFiles/"

frequencySwissMEX = 86400
ftpUrlSwissMEX = "ftpUrl"
fptUserNameSwissMEX = "user"
ftpPasswordSwissMEX ="password"
ftpPathForOutgoingFileSwissMEX ="/data/ftp/swissSMEX/lwf/"
ftpPathForIncomingFileSwissMEX = "" # not used at the moment

frequencyUniBasel = 600
ftpUrlUniBasel = "ftp.wsl.ch"
fptUserNameUniBasel = "user"
ftpPasswordUniBasel = "password"
ftpPathForOutgoingFileUniBasel = "/data/ftp/lwfcr1000/exportData/regular"
ftpPathForIncomingFileUniBasel = "" # not used at the moment

frequencyCR1000 = 240
ftpUrlCR1000 = "ftpUrl"
fptUserNameCR1000 = "user"
ftpPasswordCR1000 ="password"
ftpPathForIncomingFileCR1000 ="/data/ftp/lwfcr1000/"
ftpPathForCR1000FaultyFile = "/data/ftp/lwfcr1000/faulty/"
ftpPathForCR1000ArchiveFiles = "/opt/lwfportal/archive/cr1000Archiv_April_24_2020/"
cr1000EmailUserList ="emaillistseparatedbysemicolon"


frequencyGP2Logger = 86400
ftpUrlGP2Logger = "ftpUrl"
fptUserNameGP2Logger = "user"
ftpPasswordGP2Logger ="password"
ftpPathForIncomingFileGP2Logger ="/data/ftp/lwfcr1000/importGP2/"
ftpPathForGP2LoggerFaultyFile = "/data/ftp/lwfcr1000/faulty/"
ftpPathForGP2LoggerArchiveFiles = "/opt/lwfportal/archive/cr1000Archiv_April_24_2020/"
gp2LoggerEmailUserList ="emaillistseparatedbysemicolon"



frequencyOzone = 300
ftpUrlOzone  = "ftpUrl"
fptUserNameOzone = "user"
ftpPasswordOzone = "password"
ftpPathForIncomingFileOzone ="/data/ftp/pub/kumar/"
ftpPathForOzoneFaultyFile ="/data/ftp/pub/kumar/"
ftpPathForOzoneArchiveFiles = "D:\\projects\\lwf-portal\\archived\\"
emailUserListOzone ="emaillistseparatedbysemicolon"

frequencyPhano = 300
ftpUrlPhano  = "ftpUrl"
fptUserNamePhano = "user"
ftpPasswordPhano = "password"
ftpPathForIncomingFilePhano ="/data/ftp/pub/kumar/"
ftpPathForPhanoFaultyFile ="/data/ftp/pub/kumar/"
ftpPathForPhanoArchiveFiles = "D:\\projects\\lwf-portal\\archived\\"
emailUserListPhano ="emaillistseparatedbysemicolon"

frequencyOttPluvio = 86400
stationNrOttPluvio = numericIdOfStation
messartOttPluvio = numericIdForMeasurementParameter
startTimeForOttPulvio = "07:36:00"
emailUserListOttPluvio = "emaillistseparatedbysemicolon"


frequencyMeteoSchweizMonitoring = 3600
emailListMeteoSchweizMonitoring = "emaillistseparatedbysemicolon"
startTimeForMeteoSchweizMonitoring = ""

frequencyPreciVordemwald = 86400
stationNrPreciVordemwaldF = numericStationIdFreeland
stationNrPreciVordemwaldB = numericStationIdCanopy
messartPreciVordemwaldB = numericIdPrecipitationCanopyStation
messartPreciVordemwaldF = numericIdPrecipitationFreelandStation
startTimeForPreciVordemwald = "08:00:00"
emailUserListPreciVordemwald = "emaillistseparatedbysemicolon"


frequencyETHLae = 3600
ftpUrlETHLae = "ftpUrl"
fptUserNameETHLae = "user"
ftpPasswordETHLae ="password"
ftpPathForIncomingFileETHLae ="/data/ftp/ethz/laegeren/"
ftpPathForETHLaeFaultyFile = "/data/ftp/pub/kumar/"
ftpPathForETHLaeArchiveFiles = "/opt/lwfportal/archive/cr1000Archiv_April_24_2020/"
etHLaeEmailUserList ="emaillistseparatedbysemicolon"
ethHeaderLineT1_47 = """TIMESTAMP","RECORD","T_CR1000_T1_47_1_Avg","BV_CR1000_T1_47_1_Avg","BV_CR1000_INT_T1_47_1_Avg","SW_IN_T1_47_1_Avg","LW_IN_T1_47_1_Avg","LW_IN_COR_T1_47_1_Avg","SW_OUT_T1_47_1_Avg","LW_OUT_T1_47_1_Avg","LW_OUT_COR_T1_47_1_Avg","T_RAD_T1_47_1_Avg","TA_T1_47_1_Avg","RH_T1_47_1_Avg","PPFD_IN_T1_47_2_Avg","PPFD_OUT_T1_47_1_Avg","WS_CUP_SCALAR_T1_47_1_Avg","WS_CUP_SCALAR_T1_47_1_WVc(1)","WS_CUP_SCALAR_T1_47_1_WVc(2)","WS_CUP_SCALAR_T1_47_1_WVc(3)","WS_CUP_SCALAR_T1_47_1_WVc(4)","PREC_T1_47_1_Tot","PPFD_IN_T1_47_1_Avg","PPFD_DIF_T1_47_1_Avg","PA_T1_47_1_Avg","PPFD_OUT_T1_47_2_Avg","HEAT_HS50_T1B4_47_1","NTP_T1_47_1","T_CR1000_T1_47_1_Std","SW_IN_T1_47_1_Std","LW_IN_T1_47_1_Std","LW_IN_COR_T1_47_1_Std","SW_OUT_T1_47_1_Std","LW_OUT_T1_47_1_Std","LW_OUT_COR_T1_47_1_Std","T_RAD_T1_47_1_Std","TA_T1_47_1_Std","PREC_T1_47_1_Std","RH_T1_47_1_Std","PPFD_IN_T1_47_2_Std","PPFD_OUT_T1_47_1_Std","WS_CUP_SCALAR_T1_47_1_Std","PPFD_IN_T1_47_1_Std","PPFD_DIF_T1_47_1_Std","PA_T1_47_1_Std","PPFD_OUT_T1_47_2_Std"""
ethHeaderPrefixT1_47 = "TIMESTAMP"
specialStationKonfNrsETHLae = [{"windSpeed": numericConfNrForMeasurementParameter,"windDirection": numericConfNrForMeasurementParameter}]


frequencyETHLaeFF = 3600
ftpUrlETHLaeFF = "ftp"
fptUserNameETHLaeFF = "user"
ftpPasswordETHLaeFF ="password"
ftpPathForIncomingFileETHLaeFF ="/data/ftp/ethz/laegeren/"
ftpPathForETHLaeFaultyFileFF = "/data/ftp/pub/kumar/"
ftpPathForETHLaeArchiveFilesFF = "/opt/lwfportal/archive/cr1000Archiv_April_24_2020/"
etHLaeEmailUserListFF ="emaillistseparatedbysemicolon"
ethHeaderLineFF = """TIMESTAMP","RECORD","Batt_Volt_Avg","PTemp_C_Avg","T109Dev3_Avg","T109Dev3_Std","Windspeed_Avg","SoilTM1_05_Avg","SoilTM2_05_Avg","SoilTM3_05_Avg","SoilTM4_05_Avg","SoilTM4_10_Avg","SoilTM4_15_Avg","SoilTM4_30_Avg","SoilTM4_50_Avg","SoilMM5_05_Avg","SoilMM5_10_Avg","SoilMM5_20_Avg","SoilMM5_30_Avg","AirTM_Avg","RelHumM_Avg","WinddirM_Avg","LeafWetM_Avg","D8001_N150_Avg","D2577_N150_Avg","D2591_N150_Avg","D8002_E150_Avg","D2544_E150_Avg","D2632_E150_Avg","D2585_E150_Avg","D2587_E150_Avg","D2586_E150_Avg","DJ_E150_Avg","CO2St8001_W150_Avg","CO2St8002_W150_Avg","CO2St2577_W150_Avg","CO2St2591_W150_Avg","CO2St2585_W150_Avg","NetRadM_Avg","PPFDM_Avg","TCSt8001_W150_Avg","TCSt8002_W150_Avg","TCSt2577_W150_Avg","TCSt2591_W150_Avg","TCSt2585_W150_Avg","SHFM1_05_Avg","SHFM2_05_Avg","SHFM3_05_Avg","Sap8001_N150_Avg","Sap8001_S150_Avg","Sap2577_N150_Avg","Sap2577_S150_Avg","Sap2591_N150_Avg","Sap2591_S150_Avg","Sap2632_N150_Avg","Sap2632_S150_Avg","Sap2585_N150_Avg","Sap2585_S150_Avg","Sap2587_N150_Avg","Sap2587_S150_Avg","Sap2586_N150_Avg","Sap2586_S150_Avg","SapJ_N150_Avg","SapJ_S150_Avg","MPS02HP_Avg(1)","MPS02HP_Avg(2)","MPS02HP_Avg(3)","MPS02HP_Avg(4)","MPS02HT_Avg(1)","MPS02HT_Avg(2)","MPS02HT_Avg(3)","MPS02HT_Avg(4)"""
ethHeaderPrefixFF = "TIMESTAMP"

frequencyETHDavT = 3600
ftpUrlETHDavT = "ftpUrl"
fptUserNameETHDavT = "user"
ftpPasswordETHDavT ="password"
ftpPathForIncomingFileETHDavT ="/data/ftp/ethz/davos/"
ftpPathForETHFaultyFileDavT = "/data/ftp/pub/kumar/"
ftpPathForETHArchiveFilesDavT = "/opt/lwfportal/archive/cr1000Archiv_April_24_2020/"
etHEmailUserListDavT ="semaillistseparatedbysemicolon"
ethHeaderLineDavT = """TIMESTAMP","RECORD","SW_IN_IU_1_1_1","SW_IN_1_1_1","LW_IN_IU_1_1_1","LW_IN_1_1_1","SW_OUT_IU_1_1_1","SW_OUT_1_1_1","LW_OUT_IU_1_1_1","LW_OUT_1_1_1","LW_T_BODY_1_1_1","PPFD_IN_IU_1_1_1","PPFD_IN_1_1_1","PPFD_OUT_IU_1_1_1","PPFD_OUT_1_1_1","PPFD_DIF_1_1_1","SV_LOGGER_T1_35_1","T_LOGGER_T1_35_1","DNTP_LOGGER_T1_35_1","HEAT_HS50_T1B1_35_1_FLAG","HEAT_R350_T1B1_35_1_FLAG","SUN_T1_35_1","SW_IN_T1_35_1","LW_IN_RAW_T1_35_1","LW_IN_T1_35_1","SW_OUT_T1_35_1","LW_OUT_RAW_T1_35_1","LW_OUT_T1_35_1","T_RAD_T1_35_1","LW_IN_RAW_T1_35_2","LW_OUT_RAW_T1_35_2","TA_HEAT_T1_35_1","PPFD_IN_T1_35_3"""
ethHeaderPrefixDavT = "TIMESTAMP"


ftpUrlCR10X = "ftp.wsl.ch"
frequencyCR10X = 86400
userNameCR10X = "ftpUserName"
passwordCR10X ="password"
pathForIncomingFileCR10X ="/pathftpfolder/"
pathForArchivedFiles = "" # not used at the moment
dataFileNameCR10X= "ABC_"
stationNrCR10X = stationNr
projectNrCR10X = projectNr
periodeCR10X = duration
emailUserListCR10X ="simpal.kumar@wsl.ch"

frequencyHexenRubi = 3600
userNameHexenRubi = "networkDriveUser"
passwordHexenRubi ="networkDrivePassword"
pathForIncomingFileHexenRubi ="smb://memobi3/pathToNetworkDriveFolder"
dataFileNameHexenRubi = "NameOfTheFileToParse"
stationNrHexenRubi = numericIdStation
projectNrHexenRubi = numericProjectId
periodeHexenRubi = numericTimePeriodInMinutes
emailUserListHexenRubi ="simpal.kumar@wsl.ch;meteo@wsl.ch;"
specialStationKonfNrsHexenRubi = [{"windSpeed": numericConfNrForMeasurementParameter,"windDirection":numericConfNrForMeasurementParameter}]

frequencyBodenSpa = 7000
pathForIncomingFileBodenSpa ="D:\\projectsAndData\\SPA_files"
pathForArchivedFilesBodenSpa = "" # not used at the moment
dataFileNameBodenSpa = "FileNameStartsWith"

stationConfig = [
   { "fileName": "ABC", "stationNumber": numericIdOfStation,
     "projectParam": [
       {"projNr": 1, "params": 25, "duration": 10},
       {"projNr": 1, "params": 6, "duration": 60},
       {"projNr": 4, "params" : 3, "duration": 10},
       {"projNr": 5, "params" : 16, "duration": 10},
       {"projNr": 5, "params" : 16, "duration": 60}
     ]
   },
  {"fileName": "MODOEK_LOGGER_0_TABLE_POWER_10", "stationNumber": numericIdOfStation,
    "projectParam": [
      {"projNr": 37, "params": 14, "duration": 10}
    ]
  }
]

stationConfigETH = [
  { "fileName": "UniqueStringFileNameStartsWith", "stationNumber": numericIdOfStation,
    "projectParam": [
      {"projNr": 33, "params": 44, "duration": 10}
    ]
  }
]

stationConfigETH_FF = [
  { "fileName": "UniqueStringFileNameStartsWith", "stationNumber": numericIdOfStation,
    "projectParam": [
      {"projNr": 38, "params": 70, "duration": 10}
    ]
  }
]

stationConfigETH_DAV_T = [
    { "fileName": "UniqueStringFileNameStartsWith", "stationNumber": numericIdOfStation,
      "projectParam": [
        {"projNr": 33, "params": 31, "duration": 10}
      ]
    }
]




